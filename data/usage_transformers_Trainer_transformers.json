{
  "google/canine-s": {
    "usage_repository": [
      "github.com/bminixhofer/wtpsplit"
    ],
    "file_path": [
      "bminixhofer_wtpsplit/wtpsplit/wtpsplit/evaluation/punct_annotation.py"
    ]
  },
  "pdelobelle/robbert-v2-dutch-base": {
    "usage_repository": [
      "github.com/cltl-students/verkijk_stella_rma_thesis_dutch_medical_language_model"
    ],
    "file_path": [
      "cltl-students_verkijk_stella_rma_thesis_dutch_medical_language_model/verkijk_stella_rma_thesis_dutch_medical_language_model/src/train_lm/extend_robbert.py"
    ]
  },
  "distilbert-base-uncased": {
    "usage_repository": [
      "github.com/edarchimbaud/systematic-trading",
      "github.com/nestauk/innovation_sweet_spots",
      "github.com/TrvsF/song-sentiment-comparer",
      "github.com/Azure-Samples/media-services-video-indexer",
      "github.com/thepycoder/sarcasm_detector",
      "github.com/banjtheman/odsc_nlp_workshop",
      "github.com/RubensZimbres/Repo-2021",
      "github.com/uzh-rpg/authorship_attribution",
      "github.com/sangwook236/SWDT",
      "github.com/awslabs/syne-tune",
      "github.com/rasbt/machine-learning-book",
      "github.com/bliutech/nlp-pdf-malware-detection",
      "github.com/PacktPublishing/Machine-Learning-with-Amazon-SageMaker-Cookbook",
      "github.com/vsmolyakov/deep",
      "github.com/marshackVB/rapid_nlp_blog",
      "github.com/debayan/sigir2022-sparqlbaselines",
      "github.com/michalbaldyga/personality-type-prediction",
      "github.com/rasbt/deeplearning-models"
    ],
    "file_path": [
      "RubensZimbres_Repo-2021/Repo-2021/Hugging_Face/custom-training.py",
      "Azure-Samples_media-services-video-indexer/media-services-video-indexer/VideoTranscriptClassification/training/train_model/model_trainer.py",
      "uzh-rpg_authorship_attribution/authorship_attribution/2_distilbert/train_custom_distilbert.py",
      "uzh-rpg_authorship_attribution/authorship_attribution/5_train_only_content/train_only_content_distilbert.py",
      "marshackVB_rapid_nlp_blog/rapid_nlp_blog/blog_code_examples.py",
      "debayan_sigir2022-sparqlbaselines/sigir2022-sparqlbaselines/pgn-bert/lcq1/train/bert_classify.py",
      "thepycoder_sarcasm_detector/sarcasm_detector/train_transformer.py",
      "bliutech_nlp-pdf-malware-detection/nlp-pdf-malware-detection/train.py",
      "sangwook236_SWDT/SWDT/sw_dev/python/rnd/test/machine_learning/wandb_test.py",
      "debayan_sigir2022-sparqlbaselines/sigir2022-sparqlbaselines/pgn-bert/lcq2/train/bert_classify.py",
      "michalbaldyga_personality-type-prediction/personality-type-prediction/backend/train_model/train.py",
      "awslabs_syne-tune/syne-tune/benchmarking/training_scripts/distilbert_on_imdb/distilbert_on_imdb.py",
      "TrvsF_song-sentiment-comparer/song-sentiment-comparer/src/main/util/standalone/trainmodel.py",
      "vsmolyakov_deep/deep/pytorch/distilbert_imdb.py",
      "PacktPublishing_Machine-Learning-with-Amazon-SageMaker-Cookbook/Machine-Learning-with-Amazon-SageMaker-Cookbook/Chapter09/scripts/train.py",
      "uzh-rpg_authorship_attribution/authorship_attribution/7_train_lstm_refs_and_content/train_lstm_bert.py",
      "debayan_sigir2022-sparqlbaselines/sigir2022-sparqlbaselines/pgn-bert/lcq2/Pointer-Generator-Networks/bert_classify.py",
      "rasbt_deeplearning-models/deeplearning-models/pytorch_ipynb/transformer/distilbert-benchmark/1_just-hf.py",
      "nestauk_innovation_sweet_spots/innovation_sweet_spots/innovation_sweet_spots/analysis/notebooks/review_labelling/utils.py",
      "edarchimbaud_systematic-trading/systematic-trading/systematic_trading/strategy_ideas/ssrn_abstract_classifier.py",
      "rasbt_machine-learning-book/machine-learning-book/ch16/ch16-part3-bert.py",
      "banjtheman_odsc_nlp_workshop/odsc_nlp_workshop/module_5/train.py",
      "uzh-rpg_authorship_attribution/authorship_attribution/6_train_lstm_only_refs/train_lstm.py",
      "debayan_sigir2022-sparqlbaselines/sigir2022-sparqlbaselines/pgn-bert/lcq1/Pointer-Generator-Networks/bert_classify.py"
    ]
  },
  "bert-base-uncased": {
    "usage_repository": [
      "github.com/nedjmaou/Varifocal_Fact_Checking_QG",
      "github.com/allenai/VILA",
      "github.com/convei-lab/BotsTalk",
      "github.com/AmirAbaskohi/SemEval2022-Task6-Sarcasm-Detection",
      "github.com/usamakh20/Roman_Urdu_BERT",
      "github.com/technion-cs-nlp/bias-probing",
      "github.com/cambridgeltl/autopeft",
      "github.com/nlpie-research/MiniALBERT",
      "github.com/yizt/notebook",
      "github.com/kt2k01/petci",
      "github.com/lemay-ai/lazyTextPredict",
      "github.com/microsoft/onnxruntime",
      "github.com/dice-group/KBQA-PG",
      "github.com/smartshark/seBERT",
      "github.com/rcalix1/Projects",
      "github.com/parasurama/raceBERT",
      "github.com/samhita-alla/flyte-banana",
      "github.com/thnkinbtfly/FAD-X",
      "github.com/lancopku/text-autoaugment",
      "github.com/Markfryazino/ASLan",
      "github.com/SJTU-LIT/PEM_composition",
      "github.com/lingjzhu/spoken_sent_embedding",
      "github.com/fengbingchun/PyTorch_Test",
      "github.com/Adapter-Hub/adapter-transformers",
      "github.com/xashely/KeBioSum",
      "github.com/thunlp/BkdAtk-LWS",
      "github.com/callummcdougall/ARENA_2.0"
    ],
    "file_path": [
      "xashely_KeBioSum/KeBioSum/src/pico_adapter.py",
      "SJTU-LIT_PEM_composition/PEM_composition/tests_adapters/test_adapter_trainer.py",
      "rcalix1_Projects/Projects/BatesFungi/Pred20guilds/fungi_fine_tune_BERT_multi_class_custom_data.py",
      "allenai_VILA/VILA/tools/train-hvila.py",
      "cambridgeltl_autopeft/autopeft/adapter-transformers-adapters3.1.0/tests_adapters/test_adapter_trainer.py",
      "Adapter-Hub_adapter-transformers/adapter-transformers/tests_adapters/test_adapter_trainer.py",
      "fengbingchun_PyTorch_Test/PyTorch_Test/src/onnxruntime/orttraining/orttraining/test/python/orttraining_test_ortmodule_api.py",
      "xashely_KeBioSum/KeBioSum/src/pico_adapter_ml.py",
      "technion-cs-nlp_bias-probing/bias-probing/scripts/training.py",
      "thnkinbtfly_FAD-X/FAD-X/tests_adapters/test_adapter_trainer.py",
      "smartshark_seBERT/seBERT/fine_tuning/util.py",
      "Markfryazino_ASLan/ASLan/wardrobe/pipelines/berts/bert_on_synthetic_data.py",
      "dice-group_KBQA-PG/KBQA-PG/KBQA/appB/transformer_architectures/bert_triplebert_spbert/tripleBERT/tripleBERT_MLM_pretrain.py",
      "microsoft_onnxruntime/onnxruntime/orttraining/orttraining/test/python/orttraining_test_ortmodule_api.py",
      "AmirAbaskohi_SemEval2022-Task6-Sarcasm-Detection/SemEval2022-Task6-Sarcasm-Detection/Models/BERT/Bert.py",
      "thunlp_BkdAtk-LWS/BkdAtk-LWS/src/scripts/train_clean_model.py",
      "Markfryazino_ASLan/ASLan/wardrobe/pipelines/berts/many_berts.py",
      "callummcdougall_ARENA_2.0/ARENA_2.0/chapter3_training_at_scale/exercises/part3_finetuning_at_scale/solutions.py",
      "Markfryazino_ASLan/ASLan/wardrobe/pipelines/berts/few_shot_pretraining.py",
      "rcalix1_Projects/Projects/fungi_fine_tune_BERT_multi_class_custom_data.py",
      "usamakh20_Roman_Urdu_BERT/Roman_Urdu_BERT/fine_tuning.py",
      "parasurama_raceBERT/raceBERT/models/raceBERT_train.py",
      "lemay-ai_lazyTextPredict/lazyTextPredict/lazytextpredict/basic_classification.py",
      "lancopku_text-autoaugment/text-autoaugment/taa/search_augment_train.py",
      "yizt_notebook/notebook/yxs/demo_hotel_rating2.py",
      "samhita-alla_flyte-banana/flyte-banana/flyte/workflows/ml_pipeline.py",
      "nedjmaou_Varifocal_Fact_Checking_QG/Varifocal_Fact_Checking_QG/src/reranker_train.py",
      "kt2k01_petci/petci/models/bert/train.py",
      "lingjzhu_spoken_sent_embedding/spoken_sent_embedding/src/train_uLM.py",
      "nlpie-research_MiniALBERT/MiniALBERT/general_distillation.py",
      "convei-lab_BotsTalk/BotsTalk/tasks/self_mix/worlds.py"
    ]
  },
  "distilbert-base-cased": {
    "usage_repository": [
      "github.com/chambliss/foodbert",
      "github.com/nlpie-research/Compact-Biomedical-Transformers"
    ],
    "file_path": [
      "nlpie-research_Compact-Biomedical-Transformers/Compact-Biomedical-Transformers/DistilBioBERT-Distillation.py",
      "chambliss_foodbert/foodbert/food_extractor/train.py",
      "nlpie-research_Compact-Biomedical-Transformers/Compact-Biomedical-Transformers/CompactBioBERT-Distillation.py"
    ]
  },
  "t5-small": {
    "usage_repository": [
      "github.com/zwcolin/Domain-Robustness-Prompt-Tuning",
      "github.com/CogComp/learning-to-decompose",
      "github.com/everdoubling/byt5-Korean",
      "github.com/allenai/tracie"
    ],
    "file_path": [
      "everdoubling_byt5-Korean/byt5-Korean/pretrain.py",
      "CogComp_learning-to-decompose/learning-to-decompose/seq2seq/train_t5.py",
      "allenai_tracie/tracie/code/models/ptntime/train_t5.py",
      "zwcolin_Domain-Robustness-Prompt-Tuning/Domain-Robustness-Prompt-Tuning/main.py"
    ]
  },
  "facebook/wav2vec2-base": {
    "usage_repository": [
      "github.com/lingjzhu/charsiu",
      "github.com/pooya-mohammadi/audio-classification-pytorch",
      "github.com/RubensZimbres/Repo-2022",
      "github.com/CoEDL/elpis"
    ],
    "file_path": [
      "pooya-mohammadi_audio-classification-pytorch/audio-classification-pytorch/wav2vec2/train.py",
      "CoEDL_elpis/elpis/elpis/test/hft_test.py",
      "lingjzhu_charsiu/charsiu/experiments/train_asr.py",
      "lingjzhu_charsiu/charsiu/experiments/common_voice_pretraining.py",
      "RubensZimbres_Repo-2022/Repo-2022/Wav2Vec-Base/Trainer_8k.py",
      "lingjzhu_charsiu/charsiu/experiments/train_attention_aligner.py",
      "RubensZimbres_Repo-2022/Repo-2022/Wav2Vec-Base/Trainer_16K.py"
    ]
  },
  "bert-large-uncased": {
    "usage_repository": [
      "github.com/skramer-dev/ai-lab",
      "github.com/yxzwang/Normalized-Information-Payload",
      "github.com/UCSB-NLP-Chang/PromptBoosting",
      "github.com/smartshark/seBERT"
    ],
    "file_path": [
      "yxzwang_Normalized-Information-Payload/Normalized-Information-Payload/Pretraining_finetuning/search.py",
      "skramer-dev_ai-lab/ai-lab/NLP/assignment/finetuning/bert-large-remote.py",
      "UCSB-NLP-Chang_PromptBoosting/PromptBoosting/huggingface_finetuning.py",
      "yxzwang_Normalized-Information-Payload/Normalized-Information-Payload/Pretraining_finetuning/run_mlm_sparse.py",
      "smartshark_seBERT/seBERT/fine_tuning/util.py",
      "yxzwang_Normalized-Information-Payload/Normalized-Information-Payload/Pretraining_finetuning/run_mlm.py",
      "yxzwang_Normalized-Information-Payload/Normalized-Information-Payload/Pretraining_finetuning/run_glue_sparse.py"
    ]
  },
  "jeffwan/vicuna-13b": {
    "usage_repository": [
      "github.com/danielgross/LlamaAcademy"
    ],
    "file_path": [
      "danielgross_LlamaAcademy/LlamaAcademy/main.py"
    ]
  },
  "EleutherAI/gpt-neo-2.7B": {
    "usage_repository": [
      "github.com/dredwardhyde/gpt-neo-fine-tuning-example"
    ],
    "file_path": [
      "dredwardhyde_gpt-neo-fine-tuning-example/gpt-neo-fine-tuning-example/gpt_neo_xl_deepspeed.py"
    ]
  },
  "google/byt5-small": {
    "usage_repository": [
      "github.com/Splend1d/T5lephone",
      "github.com/parasurama/raceBERT",
      "github.com/ayushbits/pe-ocr-sanskrit"
    ],
    "file_path": [
      "parasurama_raceBERT/raceBERT/models/raceBERT_train.py",
      "ayushbits_pe-ocr-sanskrit/pe-ocr-sanskrit/train-scripts/train_ByT5.py",
      "Splend1d_T5lephone/T5lephone/cascadedSQA/finetune_text2text.py"
    ]
  },
  "roberta-large": {
    "usage_repository": [
      "github.com/UCSB-NLP-Chang/PromptBoosting"
    ],
    "file_path": [
      "UCSB-NLP-Chang_PromptBoosting/PromptBoosting/huggingface_finetuning.py"
    ]
  },
  "roberta-base": {
    "usage_repository": [
      "github.com/jmpu/DeepfakeTextDetection",
      "github.com/Markfryazino/ASLan",
      "github.com/jlealtru/website_tutorials",
      "github.com/gucci-j/light-transformer-emnlp2021",
      "github.com/SUSTechBruce/G-MAP",
      "github.com/wbsg-uni-mannheim/productCategorization",
      "github.com/lemay-ai/lazyTextPredict",
      "github.com/jpmorganchase/llm-email-spam-detection",
      "github.com/abhi1nandy2/EMNLP-2021-Findings",
      "github.com/chrisliu298/tapt",
      "github.com/GeorgeLuImmortal/RDL-Rationales-centric-Double-robustness-Learning",
      "github.com/aajrami/acl2022-pre-training-objectives-probing",
      "github.com/xashely/KeBioSum",
      "github.com/Misterion777/DOM-LM"
    ],
    "file_path": [
      "wbsg-uni-mannheim_productCategorization/productCategorization/src/experiments/runner/experiment_runner_transformer_flat.py",
      "xashely_KeBioSum/KeBioSum/src/pico_adapter.py",
      "Markfryazino_ASLan/ASLan/wardrobe/pipelines/robertas/zero_shot_pretraining.py",
      "Misterion777_DOM-LM/DOM-LM/src/train.py",
      "xashely_KeBioSum/KeBioSum/src/pico_adapter_ml.py",
      "SUSTechBruce_G-MAP/G-MAP/domain_qa_ner/mem_roberta/run_finetune_ner.py",
      "GeorgeLuImmortal_RDL-Rationales-centric-Double-robustness-Learning/RDL-Rationales-centric-Double-robustness-Learning/IMDb_step1_missing_rationales.py",
      "wbsg-uni-mannheim_productCategorization/productCategorization/src/experiments/runner/deprecated_experiment_runner_transformer_hierarchy.py",
      "GeorgeLuImmortal_RDL-Rationales-centric-Double-robustness-Learning/RDL-Rationales-centric-Double-robustness-Learning/IMDb_step0_duplication.py",
      "abhi1nandy2_EMNLP-2021-Findings/EMNLP-2021-Findings/pre-training/pretrain_manuals.py",
      "jmpu_DeepfakeTextDetection/DeepfakeTextDetection/RoBERTa-Defense/roberta_defense_eval.py",
      "jpmorganchase_llm-email-spam-detection/llm-email-spam-detection/src/spamdetection/training.py",
      "GeorgeLuImmortal_RDL-Rationales-centric-Double-robustness-Learning/RDL-Rationales-centric-Double-robustness-Learning/IMDb_step0_AL.py",
      "aajrami_acl2022-pre-training-objectives-probing/acl2022-pre-training-objectives-probing/pretrainer.py",
      "GeorgeLuImmortal_RDL-Rationales-centric-Double-robustness-Learning/RDL-Rationales-centric-Double-robustness-Learning/IMDb_step0_static_semi_factual.py",
      "GeorgeLuImmortal_RDL-Rationales-centric-Double-robustness-Learning/RDL-Rationales-centric-Double-robustness-Learning/IMDb_step1_false_rationales.py",
      "wbsg-uni-mannheim_productCategorization/productCategorization/src/experiments/runner/experiment_runner_transformer_hierarchy.py",
      "GeorgeLuImmortal_RDL-Rationales-centric-Double-robustness-Learning/RDL-Rationales-centric-Double-robustness-Learning/IMDb_step1_hybrid.py",
      "wbsg-uni-mannheim_productCategorization/productCategorization/src/experiments/runner/experiment_runner_transformer_rnn.py",
      "GeorgeLuImmortal_RDL-Rationales-centric-Double-robustness-Learning/RDL-Rationales-centric-Double-robustness-Learning/IMDb_full.py",
      "gucci-j_light-transformer-emnlp2021/light-transformer-emnlp2021/src/pretrainer.py",
      "lemay-ai_lazyTextPredict/lazyTextPredict/lazytextpredict/basic_classification.py",
      "jlealtru_website_tutorials/website_tutorials/notebooks/Multi_label_classification_roberta.py",
      "Markfryazino_ASLan/ASLan/wardrobe/pipelines/robertas/dnnc_replication.py",
      "chrisliu298_tapt/tapt/src/run_bert_text_classification.py",
      "GeorgeLuImmortal_RDL-Rationales-centric-Double-robustness-Learning/RDL-Rationales-centric-Double-robustness-Learning/IMDb_step0_random_replacement.py"
    ]
  },
  "snunlp/KR-Medium": {
    "usage_repository": [
      "github.com/JH-lee95/Korean-Sentiments-Classification"
    ],
    "file_path": [
      "JH-lee95_Korean-Sentiments-Classification/Korean-Sentiments-Classification/sentiment_analysis_trainer.py"
    ]
  },
  "bolbolzaban/gpt2-persian": {
    "usage_repository": [
      "github.com/khashei/bolbolzaban-gpt2-persian"
    ],
    "file_path": [
      "khashei_bolbolzaban-gpt2-persian/bolbolzaban-gpt2-persian/train.py"
    ]
  },
  "ai4bharat/IndicBERTv2-MLM-only": {
    "usage_repository": [
      "github.com/AI4Bharat/adapter-efficiency"
    ],
    "file_path": [
      "AI4Bharat_adapter-efficiency/adapter-efficiency/IndicBert/finetuning/COPA.py",
      "AI4Bharat_adapter-efficiency/adapter-efficiency/IndicBert/AdapterTuning/COPA.py"
    ]
  },
  "gpt2": {
    "usage_repository": [
      "github.com/Markfryazino/ASLan",
      "github.com/borisdayma/huggingtweets",
      "github.com/nlpcl-lab/Auto_Labeling",
      "github.com/SRI-CSL/arsenal-base",
      "github.com/davidsvy/Neural-Scam-Artist",
      "github.com/bipinKrishnan/ml-recipe-book",
      "github.com/kyegomez/Sophia",
      "github.com/huggingface/datablations",
      "github.com/meghabyte/acl2021-education",
      "github.com/ysymyth/ec-nl",
      "github.com/bnsreenu/python_for_microscopists",
      "github.com/arunprsh/train-gpt-from-scratch-on-sagemaker",
      "github.com/nightingal3/Fig-QA",
      "github.com/LogicPy/Python",
      "github.com/model-zoo/twitter-turing-test",
      "github.com/antoninodimaggio/Hugging-Captions",
      "github.com/yandex-research/swarm"
    ],
    "file_path": [
      "yandex-research_swarm/swarm/swarm/train_pipeline.py",
      "kyegomez_Sophia/Sophia/experiments/training.py",
      "Markfryazino_ASLan/ASLan/wardrobe/pipelines/gpt2/hard_negatives_gpt2.py",
      "arunprsh_train-gpt-from-scratch-on-sagemaker/train-gpt-from-scratch-on-sagemaker/03-train/src/pretrain.py",
      "meghabyte_acl2021-education/acl2021-education/src/run_language_modeling_question.py",
      "nlpcl-lab_Auto_Labeling/Auto_Labeling/generator/train_generator.py",
      "bipinKrishnan_ml-recipe-book/ml-recipe-book/_build/jupyter_execute/notebooks/causal_lm.py",
      "antoninodimaggio_Hugging-Captions/Hugging-Captions/tune_transformer.py",
      "davidsvy_Neural-Scam-Artist/Neural-Scam-Artist/gpt2_/utils.py",
      "arunprsh_train-gpt-from-scratch-on-sagemaker/train-gpt-from-scratch-on-sagemaker/03-train/src/finetune.py",
      "Markfryazino_ASLan/ASLan/wardrobe/pipelines/berts/bert_on_synthetic_data.py",
      "SRI-CSL_arsenal-base/arsenal-base/transformers/src/lm_scoring.py",
      "model-zoo_twitter-turing-test/twitter-turing-test/train.py",
      "nightingal3_Fig-QA/Fig-QA/src/models/train_lm_models.py",
      "LogicPy_Python/Python/AI Projects/Training Chat Models of AI/train_model.py",
      "ysymyth_ec-nl/ec-nl/lm-transfer/run_clm.py",
      "bnsreenu_python_for_microscopists/python_for_microscopists/310-Understanding sub-word tokenization used for NLP/train_language_model_original.py",
      "Markfryazino_ASLan/ASLan/wardrobe/pipelines/gpt2/dummy_gpt2.py",
      "borisdayma_huggingtweets/huggingtweets/dev/run_sweeps.py",
      "huggingface_datablations/datablations/training/mup.py"
    ]
  },
  "bert-base-cased": {
    "usage_repository": [
      "github.com/Markfryazino/ASLan",
      "github.com/bruce1408/Pytorch_learning",
      "github.com/AndyJZhao/Gophormer",
      "github.com/AmirAbaskohi/SemEval2022-Task6-Sarcasm-Detection",
      "github.com/ZovcIfzm/GeneBERT",
      "github.com/shushanxingzhe/transformers_ner",
      "github.com/brando90/ultimate-utils",
      "github.com/gsarti/lambda-bert",
      "github.com/abertsch72/perspective-shifting",
      "github.com/nogibjj/mlops-template",
      "github.com/yyxx1997/pytorch",
      "github.com/wtangdev/UniRel",
      "github.com/maxwellreuter/chatgpt-refusals",
      "github.com/HIT-SCIR/plm-nlp-code",
      "github.com/DaSE4Good/EfficientTools"
    ],
    "file_path": [
      "brando90_ultimate-utils/ultimate-utils/tutorials_for_myself/my_hf_hugging_face_pg/hf_trainer_pg.py",
      "HIT-SCIR_plm-nlp-code/plm-nlp-code/chp7/finetune_bert_ner.py",
      "ZovcIfzm_GeneBERT/GeneBERT/Old/huggingfacetutorial/minimal_regressor/run_regression.py",
      "HIT-SCIR_plm-nlp-code/plm-nlp-code/chp7/finetune_bert_mrc.py",
      "DaSE4Good_EfficientTools/EfficientTools/class3/bert_for_cls/main.py",
      "AndyJZhao_Gophormer/Gophormer/src/utils/exp/tuner.py",
      "bruce1408_Pytorch_learning/Pytorch_learning/NLP/5-2.BERT/5_1_Finetune_BERT_SSC.py",
      "yyxx1997_pytorch/pytorch/bert-ner/ner_origin.py",
      "abertsch72_perspective-shifting/perspective-shifting/src/train_gyafc.py",
      "nogibjj_mlops-template/mlops-template/hugging-face/hf_fine_tune_hello_world.py",
      "bruce1408_Pytorch_learning/Pytorch_learning/NLP/5-2.BERT/5_3_Finetune_BERT_MRC.py",
      "shushanxingzhe_transformers_ner/transformers_ner/bert_crf_trainer.py",
      "wtangdev_UniRel/UniRel/run.py",
      "gsarti_lambda-bert/lambda-bert/run_language_modeling.py",
      "HIT-SCIR_plm-nlp-code/plm-nlp-code/chp7/finetune_bert_ssc.py",
      "HIT-SCIR_plm-nlp-code/plm-nlp-code/chp7/finetune_bert_spc.py",
      "bruce1408_Pytorch_learning/Pytorch_learning/NLP/5-2.BERT/5_4_Finetune_BERT_NER.py",
      "bruce1408_Pytorch_learning/Pytorch_learning/NLP/5-2.BERT/5_2_Finetune_BERT_SPC.py",
      "AmirAbaskohi_SemEval2022-Task6-Sarcasm-Detection/SemEval2022-Task6-Sarcasm-Detection/Models/BERT/DistilBert.py",
      "maxwellreuter_chatgpt-refusals/chatgpt-refusals/bert_results.py",
      "Markfryazino_ASLan/ASLan/wardrobe/pipelines/berts/clinc_bert.py"
    ]
  },
  "uer/gpt2-chinese-cluecorpussmall": {
    "usage_repository": [
      "github.com/nachewigkeit/blog",
      "github.com/taishan1994/pytorch_Chinese_Generate"
    ],
    "file_path": [
      "taishan1994_pytorch_Chinese_Generate/pytorch_Chinese_Generate/gpt2/gpt2.py",
      "nachewigkeit_blog/blog/generation/train.py"
    ]
  },
  "hfl/chinese-roberta-wwm-ext-large": {
    "usage_repository": [
      "github.com/chenllliang/Two-Stage-CAMRP"
    ],
    "file_path": [
      "chenllliang_Two-Stage-CAMRP/Two-Stage-CAMRP/scripts/eval/inference_surface_tagging.py",
      "chenllliang_Two-Stage-CAMRP/Two-Stage-CAMRP/scripts/train/train_non_aligned_tagging.py",
      "chenllliang_Two-Stage-CAMRP/Two-Stage-CAMRP/scripts/eval/inference_non_aligned_tagging.py",
      "chenllliang_Two-Stage-CAMRP/Two-Stage-CAMRP/scripts/train/train_surface_tagging.py",
      "chenllliang_Two-Stage-CAMRP/Two-Stage-CAMRP/scripts/train/train_normalization_tagging.py",
      "chenllliang_Two-Stage-CAMRP/Two-Stage-CAMRP/scripts/eval/inference_normalization_tagging.py"
    ]
  },
  "bert-base-multilingual-cased": {
    "usage_repository": [
      "github.com/vistec-AI/thai2transformers",
      "github.com/GhanaNLP/ABENA",
      "github.com/SLAB-NLP/Akk"
    ],
    "file_path": [
      "SLAB-NLP_Akk/Akk/akkadian_bert/train_bert.py",
      "vistec-AI_thai2transformers/thai2transformers/scripts/downstream/train_token_classificaition_lm_finetuning.py",
      "SLAB-NLP_Akk/Akk/akkadian_bert/evaluate_bert.py",
      "vistec-AI_thai2transformers/thai2transformers/scripts/downstream/train_token_classification_lm_finetuning.py",
      "GhanaNLP_ABENA/ABENA/BERT/train_BERT.py",
      "vistec-AI_thai2transformers/thai2transformers/scripts/downstream/train_sequence_classification_lm_finetuning.py"
    ]
  },
  "decapoda-research/llama-7b-hf": {
    "usage_repository": [
      "github.com/megvii-research/Sparsebit",
      "github.com/xu1998hz/SEScore3",
      "github.com/Hrazhan/kurdish-llama",
      "github.com/teelinsan/camoscio",
      "github.com/fecet/alpaca-lora-Chinese",
      "github.com/tosiyuki/alpaca-lora-create-news-title",
      "github.com/runwayIA/alpaca-lora"
    ],
    "file_path": [
      "fecet_alpaca-lora-Chinese/alpaca-lora-Chinese/train_lora.ju.py",
      "runwayIA_alpaca-lora/alpaca-lora/finetune.py",
      "teelinsan_camoscio/camoscio/notebooks/train.py",
      "xu1998hz_SEScore3/SEScore3/code/finetune_llama.py",
      "megvii-research_Sparsebit/Sparsebit/large_language_models/alpaca-qlora/finetune.py",
      "Hrazhan_kurdish-llama/kurdish-llama/finetune.py",
      "tosiyuki_alpaca-lora-create-news-title/alpaca-lora-create-news-title/finetune_livedoor_news.py"
    ]
  },
  "bigscience/bloom": {
    "usage_repository": [
      "github.com/linhduongtuan/doctorwithbloom",
      "github.com/linhduongtuan/BLOOM-LORA"
    ],
    "file_path": [
      "linhduongtuan_doctorwithbloom/doctorwithbloom/finetune.py",
      "linhduongtuan_BLOOM-LORA/BLOOM-LORA/finetune.py",
      "linhduongtuan_BLOOM-LORA/BLOOM-LORA/train_CodeAlpaca20K.py",
      "linhduongtuan_BLOOM-LORA/BLOOM-LORA/train_alpaca.py",
      "linhduongtuan_BLOOM-LORA/BLOOM-LORA/train_chatdoctor.py"
    ]
  },
  "neuralmind/bert-base-portuguese-cased": {
    "usage_repository": [
      "github.com/SecexSaudeTCU/noticias_ner"
    ],
    "file_path": [
      "SecexSaudeTCU_noticias_ner/noticias_ner/noticias_ner/ner/bert/fine_tuning.py"
    ]
  },
  "bert-base-chinese": {
    "usage_repository": [
      "github.com/CLUEbenchmark/modelfun",
      "github.com/jackliaoall/5th-cv-nlp-camp"
    ],
    "file_path": [
      "CLUEbenchmark_modelfun/modelfun/modelfun/algorithm/torch_backend/modelfun/models/bertner_search.py",
      "jackliaoall_5th-cv-nlp-camp/5th-cv-nlp-camp/\u7b2c\u4e00\u7ae0 \u76f4\u64ad\u8bfe\u56de\u653e/1-9 \u8282\u76f4\u64ad6\uff1aBERT\u7cfb\u5217\u6a21\u578b\u4e0e\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u5b9e\u4f8b/ner/trainNer.py",
      "CLUEbenchmark_modelfun/modelfun/modelfun/algorithm/torch_backend/modelfun/models/bertner.py"
    ]
  },
  "Rostlab/prot_bert": {
    "usage_repository": [
      "github.com/ejp-lab/EJPLab_Computational_Projects"
    ],
    "file_path": [
      "ejp-lab_EJPLab_Computational_Projects/EJPLab_Computational_Projects/AmyloidPrediction/DeepLearning/Transformers/semi_supervised_learning_transformer.py",
      "ejp-lab_EJPLab_Computational_Projects/EJPLab_Computational_Projects/AmyloidPrediction/DeepLearning/Transformers/HT_CV_2.py"
    ]
  },
  "microsoft/deberta-xlarge": {
    "usage_repository": [
      "github.com/zui0711/Z-Lab"
    ],
    "file_path": [
      "zui0711_Z-Lab/Z-Lab/2022 Kaggle NBME/pretrain-xlarge.py"
    ]
  },
  "Salesforce/codet5-base": {
    "usage_repository": [
      "github.com/siddhartha-gadgil/LeanAide"
    ],
    "file_path": [
      "siddhartha-gadgil_LeanAide/LeanAide/scripts/finetuneruby.py",
      "siddhartha-gadgil_LeanAide/LeanAide/scripts/finetune_codet5_ids.py"
    ]
  },
  "klue/roberta-large": {
    "usage_repository": [
      "github.com/joonkeekim/AIGC_SilverIRIS"
    ],
    "file_path": [
      "joonkeekim_AIGC_SilverIRIS/AIGC_SilverIRIS/main.py"
    ]
  },
  "ctl/wav2vec2-large-xlsr-cantonese": {
    "usage_repository": [
      "github.com/HLTCHKUST/CI-AVSR"
    ],
    "file_path": [
      "HLTCHKUST_CI-AVSR/CI-AVSR/eval.py"
    ]
  },
  "alisawuffles/roberta-large-wanli": {
    "usage_repository": [
      "github.com/msclar/referee"
    ],
    "file_path": [
      "msclar_referee/referee/src/finetune_referee_distill.py"
    ]
  },
  "dmis-lab/biobert-base-cased-v1.1": {
    "usage_repository": [
      "github.com/smitkiri/ehr-relation-extraction"
    ],
    "file_path": [
      "smitkiri_ehr-relation-extraction/ehr-relation-extraction/predict.py"
    ]
  },
  "celtics1863/env-bert-chinese": {
    "usage_repository": [
      "github.com/celtics1863/envtext"
    ],
    "file_path": [
      "celtics1863_envtext/envtext/src/envtext/models/bert_base.py"
    ]
  },
  "facebook/wav2vec2-large-xlsr-53": {
    "usage_repository": [
      "github.com/lingjzhu/charsiu",
      "github.com/vistec-AI/wav2vec2-large-xlsr-53-th",
      "github.com/RubensZimbres/Repo-2021",
      "github.com/RubensZimbres/Repo-2022"
    ],
    "file_path": [
      "RubensZimbres_Repo-2022/Repo-2022/Wav2Vec-Base/Trainer_wav2vec2-Large.py",
      "RubensZimbres_Repo-2021/Repo-2021/Hugging_Face/fine-tune-wav2vec2-large-xlsr-PTBR.py",
      "vistec-AI_wav2vec2-large-xlsr-53-th/wav2vec2-large-xlsr-53-th/scripts/wav2vec2_finetune.py",
      "RubensZimbres_Repo-2022/Repo-2022/Wav2Vec-Base/Multilingual_librispeech_Trainer.py",
      "lingjzhu_charsiu/charsiu/experiments/common_voice_pretraining.py"
    ]
  },
  "ai4bharat/indic-bert": {
    "usage_repository": [
      "github.com/Exploration-Lab/HLDC"
    ],
    "file_path": [
      "Exploration-Lab_HLDC/HLDC/Model/Saliency_Pred+IndicBert/SC-indicBert-Districtwise.py",
      "Exploration-Lab_HLDC/HLDC/Model/Saliency_Pred+IndicBert/SC-IndicBert-AllDIstricts.py",
      "Exploration-Lab_HLDC/HLDC/Model/Indicbert/train_first_512_alldistricts.py",
      "Exploration-Lab_HLDC/HLDC/Model/TF-IDF+IndicBert/tfidf_sum+indic-ad.py",
      "Exploration-Lab_HLDC/HLDC/Model/Indicbert/train_last_512_district_split.py",
      "Exploration-Lab_HLDC/HLDC/Model/TextRank+IndicBert/textrank_sum+indic-ad.py",
      "Exploration-Lab_HLDC/HLDC/Model/Indicbert/train_first_512_district_split.py",
      "Exploration-Lab_HLDC/HLDC/Model/TF-IDF+IndicBert/tfidf_sum+indic-dw.py",
      "Exploration-Lab_HLDC/HLDC/Model/Indicbert/train_last_512_alldistricts.py",
      "Exploration-Lab_HLDC/HLDC/Model/TextRank+IndicBert/textrank_sum+indic-dw.py"
    ]
  },
  "dmis-lab/biobert-base-cased-v1.2": {
    "usage_repository": [
      "github.com/nlpie-research/MiniALBERT",
      "github.com/nlpie-research/Compact-Biomedical-Transformers"
    ],
    "file_path": [
      "nlpie-research_MiniALBERT/MiniALBERT/bio_distillation.py",
      "nlpie-research_Compact-Biomedical-Transformers/Compact-Biomedical-Transformers/CompactBioBERT-Distillation.py",
      "nlpie-research_Compact-Biomedical-Transformers/Compact-Biomedical-Transformers/DistilBioBERT-Distillation.py",
      "nlpie-research_Compact-Biomedical-Transformers/Compact-Biomedical-Transformers/TinyBioBERT-Distillation.py"
    ]
  },
  "youzanai/bert-product-title-chinese": {
    "usage_repository": [
      "github.com/youzanai/trexpark"
    ],
    "file_path": [
      "youzanai_trexpark/trexpark/src/token_classification/product_title_ner/title_token_classification.py",
      "youzanai_trexpark/trexpark/src/text_classification/title_classification/title_classification.py"
    ]
  },
  "albert-base-v1": {
    "usage_repository": [
      "github.com/nlpie-research/Lightweight-Clinical-Transformers",
      "github.com/nlpie-research/MiniALBERT"
    ],
    "file_path": [
      "nlpie-research_MiniALBERT/MiniALBERT/bio_distillation.py",
      "nlpie-research_Lightweight-Clinical-Transformers/Lightweight-Clinical-Transformers/ClinicalMiniALBERT-Distillation.py",
      "nlpie-research_MiniALBERT/MiniALBERT/general_distillation.py"
    ]
  },
  "fnlp/bart-base-chinese": {
    "usage_repository": [
      "github.com/taishan1994/pytorch_Chinese_Generate"
    ],
    "file_path": [
      "taishan1994_pytorch_Chinese_Generate/pytorch_Chinese_Generate/bart/bart.py"
    ]
  },
  "fnlp/bart-large-chinese": {
    "usage_repository": [
      "github.com/taishan1994/pytorch_Chinese_Generate"
    ],
    "file_path": [
      "taishan1994_pytorch_Chinese_Generate/pytorch_Chinese_Generate/bart/bart.py"
    ]
  },
  "facebook/bart-large": {
    "usage_repository": [
      "github.com/Annie-Yeeun-Jang/text_style_transfer_Tobigs",
      "github.com/princeton-nlp/WebShop",
      "github.com/SALT-NLP/positive-frames",
      "github.com/younghuman/LLMAgent"
    ],
    "file_path": [
      "princeton-nlp_WebShop/WebShop/baseline_models/train_search_il.py",
      "SALT-NLP_positive-frames/positive-frames/run.py",
      "Annie-Yeeun-Jang_text_style_transfer_Tobigs/text_style_transfer_Tobigs/Formal_Transformer/classifier/bart_train_classifier.py",
      "younghuman_LLMAgent/LLMAgent/webshop/baseline_models/train_search_il.py"
    ]
  },
  "google/flan-t5-base": {
    "usage_repository": [
      "github.com/jpmorganchase/llm-email-spam-detection"
    ],
    "file_path": [
      "jpmorganchase_llm-email-spam-detection/llm-email-spam-detection/src/spamdetection/training.py"
    ]
  },
  "google/tapas-base-finetuned-wtq": {
    "usage_repository": [
      "github.com/vis-nlp/ChartQA"
    ],
    "file_path": [
      "vis-nlp_ChartQA/ChartQA/Models/VisionTapas/train_question_answering.py",
      "vis-nlp_ChartQA/ChartQA/Models/VisionTapas/train_classification.py"
    ]
  },
  "google/vit-base-patch16-224-in21k": {
    "usage_repository": [
      "github.com/vis-nlp/ChartQA",
      "github.com/The-AI-Summer/Hugging_Face_tutorials",
      "github.com/ALM-LAB/CALM"
    ],
    "file_path": [
      "vis-nlp_ChartQA/ChartQA/Models/VisionTapas/train_question_answering.py",
      "ALM-LAB_CALM/CALM/vit_er/train_vit_emotion.py",
      "The-AI-Summer_Hugging_Face_tutorials/Hugging_Face_tutorials/vit.py",
      "vis-nlp_ChartQA/ChartQA/Models/VisionTapas/train_classification.py"
    ]
  },
  "distilgpt2": {
    "usage_repository": [
      "github.com/nayr974/AICatFacts-TwitterBot",
      "github.com/Renderflux/evoker"
    ],
    "file_path": [
      "Renderflux_evoker/evoker/evoker/train.py",
      "nayr974_AICatFacts-TwitterBot/AICatFacts-TwitterBot/train_model.py"
    ]
  },
  "deepset/bert-large-uncased-whole-word-masking-squad2": {
    "usage_repository": [
      "github.com/kstats/CausalQG"
    ],
    "file_path": [
      "kstats_CausalQG/CausalQG/QA/finetune_qa.py"
    ]
  },
  "microsoft/resnet-18": {
    "usage_repository": [
      "github.com/easeml/datascope"
    ],
    "file_path": [
      "easeml_datascope/datascope/experiments/datascope/experiments/pipelines/models.py"
    ]
  },
  "microsoft/codebert-base": {
    "usage_repository": [
      "github.com/lyccol/CodeBERT-based-webshell-detection"
    ],
    "file_path": [
      "lyccol_CodeBERT-based-webshell-detection/CodeBERT-based-webshell-detection/Demo.py"
    ]
  },
  "xlm-roberta-base": {
    "usage_repository": [
      "github.com/AI4Bharat/adapter-efficiency",
      "github.com/abteen/americasnli",
      "github.com/ysunbp/Fake-News-Detection-with-HetGNN",
      "github.com/vistec-AI/thai2transformers",
      "github.com/ShareChatAI/MACD"
    ],
    "file_path": [
      "ShareChatAI_MACD/MACD/finetune.py",
      "AI4Bharat_adapter-efficiency/adapter-efficiency/XLMR/Adapter-tuning/qa.py",
      "ysunbp_Fake-News-Detection-with-HetGNN/Fake-News-Detection-with-HetGNN/text_embed/finetune_text_embedder.py",
      "abteen_americasnli/americasnli/evaluate_xnli.py",
      "AI4Bharat_adapter-efficiency/adapter-efficiency/XLMR/finetune/xnli.py",
      "AI4Bharat_adapter-efficiency/adapter-efficiency/XLMR/finetune/qa.py",
      "AI4Bharat_adapter-efficiency/adapter-efficiency/XLMR/mtl/ner_mtl.py",
      "AI4Bharat_adapter-efficiency/adapter-efficiency/XLMR/finetune/ner.py",
      "vistec-AI_thai2transformers/thai2transformers/scripts/downstream/train_sequence_classification_lm_finetuning.py"
    ]
  },
  "Davlan/bert-base-multilingual-cased-ner-hrl": {
    "usage_repository": [
      "github.com/grant-TraDA/NLP-2022L"
    ],
    "file_path": [
      "grant-TraDA_NLP-2022L/NLP-2022L/projects/team_3/notebooks/train_bert.py"
    ]
  },
  "ckiplab/albert-base-chinese-ner": {
    "usage_repository": [
      "github.com/jackliaoall/5th-cv-nlp-camp"
    ],
    "file_path": [
      "jackliaoall_5th-cv-nlp-camp/5th-cv-nlp-camp/\u7b2c\u4e00\u7ae0 \u76f4\u64ad\u8bfe\u56de\u653e/1-9 \u8282\u76f4\u64ad6\uff1aBERT\u7cfb\u5217\u6a21\u578b\u4e0e\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u5b9e\u4f8b/ner/trainNer.py"
    ]
  },
  "xlm-roberta-large": {
    "usage_repository": [
      "github.com/vistec-AI/thai2transformers",
      "github.com/AI4Bharat/adapter-efficiency"
    ],
    "file_path": [
      "AI4Bharat_adapter-efficiency/adapter-efficiency/XLMR/Adapter-tuning/qa.py",
      "AI4Bharat_adapter-efficiency/adapter-efficiency/XLMR/finetune/xnli.py",
      "AI4Bharat_adapter-efficiency/adapter-efficiency/XLMR/finetune/qa.py",
      "AI4Bharat_adapter-efficiency/adapter-efficiency/XLMR/finetune/ner.py",
      "vistec-AI_thai2transformers/thai2transformers/scripts/downstream/train_sequence_classification_lm_finetuning.py"
    ]
  },
  "google/mobilebert-uncased": {
    "usage_repository": [
      "github.com/pabloschwarzenberg/CINF104"
    ],
    "file_path": [
      "pabloschwarzenberg_CINF104/CINF104/nlp/eval_fine_tuning.py",
      "pabloschwarzenberg_CINF104/CINF104/nlp/fine_tuning_mbert.py"
    ]
  },
  "ynie/electra-large-discriminator-snli_mnli_fever_anli_R1_R2_R3-nli": {
    "usage_repository": [
      "github.com/usc-isi-i2/logical-fallacy-identification"
    ],
    "file_path": [
      "usc-isi-i2_logical-fallacy-identification/logical-fallacy-identification/CBR/experiments/classification_with_segments.py"
    ]
  },
  "ynie/albert-xxlarge-v2-snli_mnli_fever_anli_R1_R2_R3-nli": {
    "usage_repository": [
      "github.com/microsoft/ContextualSP"
    ],
    "file_path": [
      "microsoft_ContextualSP/ContextualSP/logigan/pre-training/nli_es.py"
    ]
  },
  "microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract": {
    "usage_repository": [
      "github.com/xashely/KeBioSum"
    ],
    "file_path": [
      "xashely_KeBioSum/KeBioSum/src/pico_adapter.py",
      "xashely_KeBioSum/KeBioSum/src/pico_adapter_ml.py"
    ]
  },
  "dmis-lab/biobert-v1.1": {
    "usage_repository": [
      "github.com/xashely/KeBioSum"
    ],
    "file_path": [
      "xashely_KeBioSum/KeBioSum/src/pico_adapter.py",
      "xashely_KeBioSum/KeBioSum/src/pico_adapter_ml.py"
    ]
  },
  "google/mt5-large": {
    "usage_repository": [
      "github.com/everdoubling/byt5-Korean"
    ],
    "file_path": [
      "everdoubling_byt5-Korean/byt5-Korean/ape210k_t5_hug.py"
    ]
  },
  "albert-base-v2": {
    "usage_repository": [
      "github.com/lemay-ai/lazyTextPredict"
    ],
    "file_path": [
      "lemay-ai_lazyTextPredict/lazyTextPredict/lazytextpredict/basic_classification.py"
    ]
  },
  "google/canine-c": {
    "usage_repository": [
      "github.com/morrisalp/unikud"
    ],
    "file_path": [
      "morrisalp_unikud/unikud/src/train_unikud.py",
      "morrisalp_unikud/unikud/src/train_ktiv_male.py"
    ]
  },
  "facebook/wav2vec2-base-960h": {
    "usage_repository": [
      "github.com/smeelock/speechemotionrecognition"
    ],
    "file_path": [
      "smeelock_speechemotionrecognition/speechemotionrecognition/scripts/run-fusion-model.py",
      "smeelock_speechemotionrecognition/speechemotionrecognition/scripts/run-baseline.py"
    ]
  },
  "togethercomputer/RedPajama-INCITE-Chat-3B-v1": {
    "usage_repository": [
      "github.com/togethercomputer/OpenChatKit"
    ],
    "file_path": [
      "togethercomputer_OpenChatKit/OpenChatKit/training/lora/example/redpajama-incite-chat-3b.py"
    ]
  },
  "distilroberta-base": {
    "usage_repository": [
      "github.com/chrisliu298/tapt"
    ],
    "file_path": [
      "chrisliu298_tapt/tapt/src/run_bert_text_classification.py"
    ]
  },
  "allenai/longformer-base-4096": {
    "usage_repository": [
      "github.com/aviclu/CDLM",
      "github.com/jlealtru/website_tutorials"
    ],
    "file_path": [
      "aviclu_CDLM/CDLM/pretraining/run_language_modeling.py",
      "jlealtru_website_tutorials/website_tutorials/notebooks/Longformer with IMDB.py"
    ]
  },
  "lanwuwei/GigaBERT-v4-Arabic-and-English": {
    "usage_repository": [
      "github.com/edchengg/GigaBERT"
    ],
    "file_path": [
      "edchengg_GigaBERT/GigaBERT/relation_extraction/arabic_relation_enar.py",
      "edchengg_GigaBERT/GigaBERT/relation_extraction/arabic_ner.py",
      "edchengg_GigaBERT/GigaBERT/relation_extraction/arabic_relation.py"
    ]
  },
  "hf-internal-testing/llama-tokenizer": {
    "usage_repository": [
      "github.com/liutiedong/goat"
    ],
    "file_path": [
      "liutiedong_goat/goat/finetune.py"
    ]
  },
  "apple/mobilevit-small": {
    "usage_repository": [
      "github.com/NimbleBoxAI/nbox-specimens"
    ],
    "file_path": [
      "NimbleBoxAI_nbox-specimens/nbox-specimens/deepspeed/train.py"
    ]
  },
  "microsoft/deberta-v3-large": {
    "usage_repository": [
      "github.com/HappyGu0524/MultiControl",
      "github.com/zui0711/Z-Lab"
    ],
    "file_path": [
      "HappyGu0524_MultiControl/MultiControl/classify/eval.py",
      "zui0711_Z-Lab/Z-Lab/2022 Kaggle NBME/pretrain-large-v3.py"
    ]
  },
  "allenai/scibert_scivocab_uncased": {
    "usage_repository": [
      "github.com/jpwahle/iconf22-covid-misinformation"
    ],
    "file_path": [
      "jpwahle_iconf22-covid-misinformation/iconf22-covid-misinformation/intermediate_training/cv_scibert.py"
    ]
  },
  "facebook/bart-base": {
    "usage_repository": [
      "github.com/jpwahle/iconf22-covid-misinformation",
      "github.com/princeton-nlp/WebShop",
      "github.com/younghuman/LLMAgent"
    ],
    "file_path": [
      "princeton-nlp_WebShop/WebShop/baseline_models/train_search_il.py",
      "jpwahle_iconf22-covid-misinformation/iconf22-covid-misinformation/intermediate_training/cv_bart_mlm.py",
      "younghuman_LLMAgent/LLMAgent/webshop/baseline_models/train_search_il.py"
    ]
  },
  "seyonec/SMILES_tokenized_PubChem_shard00_160k": {
    "usage_repository": [
      "github.com/seyonechithrananda/bert-loves-chemistry"
    ],
    "file_path": [
      "seyonechithrananda_bert-loves-chemistry/bert-loves-chemistry/chemberta/masked-lm/smiles-tokenizer/smiles_tokenizer_pubchem10m.py"
    ]
  },
  "google/electra-base-generator": {
    "usage_repository": [
      "github.com/bit-ml/AnoShift"
    ],
    "file_path": [
      "bit-ml_AnoShift/AnoShift/language_models/model_utils.py"
    ]
  },
  "gpt2-large": {
    "usage_repository": [
      "github.com/msclar/referee"
    ],
    "file_path": [
      "msclar_referee/referee/src/finetune_referee_distill_with_context_filter.py",
      "msclar_referee/referee/src/finetune_referee_control.py"
    ]
  },
  "EleutherAI/gpt-neo-1.3B": {
    "usage_repository": [
      "github.com/dredwardhyde/gpt-neo-fine-tuning-example",
      "github.com/brando90/ultimate-utils"
    ],
    "file_path": [
      "brando90_ultimate-utils/ultimate-utils/tutorials_for_myself/my_hf_hugging_face_pg/gpt/fine_tune_gpt_neo.py",
      "dredwardhyde_gpt-neo-fine-tuning-example/gpt-neo-fine-tuning-example/gpt_neo.py"
    ]
  },
  "google/byt5-large": {
    "usage_repository": [
      "github.com/everdoubling/byt5-Korean"
    ],
    "file_path": [
      "everdoubling_byt5-Korean/byt5-Korean/ape210k_t5_byt5.py"
    ]
  },
  "decapoda-research/llama-13b-hf": {
    "usage_repository": [
      "github.com/plncmm/guanaco-lora"
    ],
    "file_path": [
      "plncmm_guanaco-lora/guanaco-lora/guanaco-lora.py"
    ]
  },
  "facebook/mbart-large-50-many-to-many-mmt": {
    "usage_repository": [
      "github.com/ayushbits/pe-ocr-sanskrit"
    ],
    "file_path": [
      "ayushbits_pe-ocr-sanskrit/pe-ocr-sanskrit/train-scripts/train_BART.py"
    ]
  },
  "openai-gpt": {
    "usage_repository": [
      "github.com/SALT-NLP/positive-frames"
    ],
    "file_path": [
      "SALT-NLP_positive-frames/positive-frames/run.py"
    ]
  },
  "pierreguillou/gpt2-small-portuguese": {
    "usage_repository": [
      "github.com/HAILab-PUCPR/gpt2-bio-pt"
    ],
    "file_path": [
      "HAILab-PUCPR_gpt2-bio-pt/gpt2-bio-pt/train.py"
    ]
  },
  "EleutherAI/gpt-neox-20b": {
    "usage_repository": [
      "github.com/mallorbc/Finetune_LLMs",
      "github.com/retarfi/jallm"
    ],
    "file_path": [
      "retarfi_jallm/jallm/jallm/training_utils.py",
      "mallorbc_Finetune_LLMs/Finetune_LLMs/finetuning_repo/run_clm.py"
    ]
  },
  "bert-large-cased": {
    "usage_repository": [
      "github.com/jmpu/DeepfakeTextDetection"
    ],
    "file_path": [
      "jmpu_DeepfakeTextDetection/DeepfakeTextDetection/BERT-Defense/bert_fine_tune.py",
      "jmpu_DeepfakeTextDetection/DeepfakeTextDetection/BERT-Defense/bert_defense_eval.py"
    ]
  },
  "valhalla/longformer-base-4096-finetuned-squadv1": {
    "usage_repository": [
      "github.com/abhijithneilabraham/Covid-QA"
    ],
    "file_path": [
      "abhijithneilabraham_Covid-QA/Covid-QA/longformer_qa/longformer_finetune.py"
    ]
  },
  "THUDM/chatglm-6b": {
    "usage_repository": [
      "github.com/thaumstrial/FinetuneGLMWithPeft",
      "github.com/ykk648/AI_power"
    ],
    "file_path": [
      "thaumstrial_FinetuneGLMWithPeft/FinetuneGLMWithPeft/finetune.py",
      "ykk648_AI_power/AI_power/gpt_lib/chatglm6b_finetune/finetune.py"
    ]
  },
  "hfl/chinese-bert-wwm": {
    "usage_repository": [
      "github.com/QiuSYang/deep-learning-study"
    ],
    "file_path": [
      "QiuSYang_deep-learning-study/deep-learning-study/knowledge_point_extraction/src/train.py"
    ]
  },
  "cross-encoder/nli-roberta-base": {
    "usage_repository": [
      "github.com/usc-isi-i2/logical-fallacy-identification"
    ],
    "file_path": [
      "usc-isi-i2_logical-fallacy-identification/logical-fallacy-identification/CBR/cbr_analyser/case_retriever/transformers/coarsegrained_labels_based_retriever.py"
    ]
  },
  "huggingface-course/code-search-net-tokenizer": {
    "usage_repository": [
      "github.com/bipinKrishnan/ml-recipe-book"
    ],
    "file_path": [
      "bipinKrishnan_ml-recipe-book/ml-recipe-book/_build/jupyter_execute/notebooks/causal_lm.py"
    ]
  },
  "t5-base": {
    "usage_repository": [
      "github.com/AlibabaResearch/DAMO-ConvAI",
      "github.com/castorini/pygaggle"
    ],
    "file_path": [
      "AlibabaResearch_DAMO-ConvAI/DAMO-ConvAI/ssll/pretrain.py",
      "castorini_pygaggle/pygaggle/scripts/train_d2q.py"
    ]
  },
  "microsoft/layoutlmv2-base-uncased": {
    "usage_repository": [
      "github.com/walidamamou/layoutlmV2"
    ],
    "file_path": [
      "walidamamou_layoutlmV2/layoutlmV2/train.py"
    ]
  },
  "dslim/bert-base-NER": {
    "usage_repository": [
      "github.com/WeiNyn/DIETClassifier-pytorch"
    ],
    "file_path": [
      "WeiNyn_DIETClassifier-pytorch/DIETClassifier-pytorch/src/models/trainer.py"
    ]
  },
  "dbmdz/bert-base-italian-uncased": {
    "usage_repository": [
      "github.com/Tiledesk/tiledesk-ai"
    ],
    "file_path": [
      "Tiledesk_tiledesk-ai/tiledesk-ai/tileai/core/tiletrainer_bert.py"
    ]
  },
  "facebook/wav2vec2-large-100k-voxpopuli": {
    "usage_repository": [
      "github.com/ccoreilly/wav2vec2-catala"
    ],
    "file_path": [
      "ccoreilly_wav2vec2-catala/wav2vec2-catala/train.py"
    ]
  },
  "Dr-BERT/DrBERT-7GB": {
    "usage_repository": [
      "github.com/qanastek/DrBERT"
    ],
    "file_path": [
      "qanastek_DrBERT/DrBERT/recipes/train_quaero.py"
    ]
  },
  "allenai/unifiedqa-t5-base": {
    "usage_repository": [
      "github.com/zhouhanxie/PRAG"
    ],
    "file_path": [
      "zhouhanxie_PRAG/PRAG/noisy_sum/train_summarizer.py"
    ]
  },
  "gpt2-medium": {
    "usage_repository": [
      "github.com/cipher982/this-wine-does-not-exist"
    ],
    "file_path": [
      "cipher982_this-wine-does-not-exist/this-wine-does-not-exist/extra_code/deepspeed_gpt2.py"
    ]
  },
  "beomi/KcELECTRA-base": {
    "usage_repository": [
      "github.com/sabin5105/anti-cursing"
    ],
    "file_path": [
      "sabin5105_anti-cursing/anti-cursing/modeling/sentimental_multi_classification.py"
    ]
  },
  "microsoft/deberta-v3-small": {
    "usage_repository": [
      "github.com/MonliH/reBlock"
    ],
    "file_path": [
      "MonliH_reBlock/reBlock/ai/training.py"
    ]
  },
  "skeskinen/llama-lite-134m": {
    "usage_repository": [
      "github.com/skeskinen/llama-lite"
    ],
    "file_path": [
      "skeskinen_llama-lite/llama-lite/model_creation/model.py"
    ]
  },
  "google/tapas-large": {
    "usage_repository": [
      "github.com/luka-group/Salience-aware-Learning"
    ],
    "file_path": [
      "luka-group_Salience-aware-Learning/Salience-aware-Learning/token_replacement/mlm.py"
    ]
  }
}
